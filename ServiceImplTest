package com.bank.mortgageApp.service;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import com.bank.mortgageApp.dto.ApplyLoanDto;
import com.bank.mortgageApp.dto.LoanApplyResponseDto;
import com.bank.mortgageApp.dto.LoanDetailsResponseDto;
import com.bank.mortgageApp.dto.UserRequestDto;
import com.bank.mortgageApp.entity.LoanDetails;
import com.bank.mortgageApp.entity.UserDetails;
import com.bank.mortgageApp.repository.LoanRepository;
import com.bank.mortgageApp.repository.UserRepository;
import com.bank.mortgageApp.util.ApplicationUtilityClass;


@RunWith(MockitoJUnitRunner.class)
public class UserServiceImplTest {
	
	@Mock
	LoanRepository loanRepository;
	@Mock
	UserRepository userRepository;
	@Mock
	ApplicationUtilityClass applicationUtilityClass;
	@InjectMocks
	UserServiceImpl userServiceImpl;	

	@Test
	public void testFetchLoanDetails() {
		
		List<LoanDetails> listLoan=new ArrayList<>();
		LoanDetails loanDetails =new LoanDetails();
		loanDetails.setEmi("3");
		loanDetails.setLoanAmount(900000.0);
		loanDetails.setLoanId(1);
		loanDetails.setRateOfInterest(0.6);
		loanDetails.setTenure(2);
		listLoan.add(loanDetails);
		Mockito.when(loanRepository.findByLoanAmountLessThanEqual(Mockito.anyDouble())).thenReturn(listLoan);
		UserRequestDto userRequestDto=new UserRequestDto();
		userRequestDto.setDob("03/02/1994");
		userRequestDto.setEmail("");
		userRequestDto.setFirstName("");
		userRequestDto.setGender("");
		userRequestDto.setLastName("");
		userRequestDto.setMobileNumber(9888766L);
		userRequestDto.setPropertyName("");
		userRequestDto.setPropertyType("");
		
		List<LoanDetails> actual=userServiceImpl.fetchLoanDetails(userRequestDto);
		assertEquals(1, actual.size());
	}

	@Test
	public void applyForLoanTest() {
		
		LoanApplyResponseDto loanApplyResponseDto = new LoanApplyResponseDto();
		
		
		LoanDetails loanDetails =new LoanDetails();
		loanDetails.setEmi("3");
		loanDetails.setLoanAmount(900000.0);
		loanDetails.setLoanId(1);
		loanDetails.setRateOfInterest(0.6);
		loanDetails.setTenure(2);
		
		
		UserDetails userDetails = new UserDetails();
		
		userDetails.setDOB("12/12/2001");
		userDetails.setEmail("manisha@gmail.com");
		userDetails.setFirstName("Manisha");
		userDetails.setLastName("Yadav");
		userDetails.setLoanDetails(loanDetails);
		userDetails.setMobileNumber(887675645L);
		userDetails.setPropertyName("House");
		userDetails.setPropertyType("Retail");
		userDetails.setPropertyValue(786765.0);
		userDetails.setUserId(1);
		
		ApplyLoanDto applyLoanDto=new ApplyLoanDto();
		
		
		applyLoanDto.setLoanId(1);
		applyLoanDto.setUserId(1);
		
		
		Optional<UserDetails> optionalUs=Optional.of(userDetails);
		
		Optional<LoanDetails> optionalloan=Optional.of(loanDetails);
		Mockito.when(userRepository.findById(Mockito.anyInt())).thenReturn(optionalUs);
		
		Mockito.when(loanRepository.findById(Mockito.anyInt())).thenReturn(optionalloan);

		LoanApplyResponseDto actual=userServiceImpl.applyForLoan(applyLoanDto);
		assertEquals("success", actual.getMessage());
	
	}
	
	@Test
	public void getApprovedLoanAmount() {
		
		LoanDetails loanDetails =new LoanDetails();
		loanDetails.setEmi("3");
		loanDetails.setLoanAmount(900000.0);
		loanDetails.setLoanId(1);
		loanDetails.setRateOfInterest(0.6);
		loanDetails.setTenure(2);
		
		UserDetails userDetails = new UserDetails();
		userDetails.setDOB("12/12/2001");
		userDetails.setEmail("manisha@gmail.com");
		userDetails.setFirstName("Manisha");
		userDetails.setLastName("Yadav");
		userDetails.setLoanDetails(loanDetails);
		userDetails.setMobileNumber(887675645L);
		userDetails.setPropertyName("House");
		userDetails.setPropertyType("Retail");
		userDetails.setPropertyValue(786765.0);
		userDetails.setUserId(1);
		Mockito.when(userRepository.findByMobileNumber(Mockito.anyLong())).thenReturn(userDetails);
		LoanDetailsResponseDto actual = userServiceImpl.getApprovedLoanAmount(userDetails.getMobileNumber());
		assertEquals("3", actual.getEmi());
	}
	}


